import os
import json
import shutil

# Load json and save directory for labels train/val/test
coco_file = 'annotations/person_keypoints_Train.json'  # Replace with your file
save_folder = 'opLabelsN/'

# Source of all the images and destination folder for train/test/val
source_path = "images/"
destination_path = "opImages/"

# Use os.listdir() to get a list of filenames in the folder
file_names = os.listdir(source_path)

with open(coco_file) as f:
    coco = json.load(f)

annotations = coco['annotations']
categories = {cat['id']: cat['name'] for cat in coco['categories']}
images = {img['id']: img for img in coco['images']}

# Create the output folders
os.makedirs(save_folder, exist_ok=True)
os.makedirs(destination_path, exist_ok=True)

for ann in annotations:
    image = images[ann['image_id']]
    
    if image["file_name"] not in file_names:
        continue

    width, height = image['width'], image['height']
    
    x_center = (ann['bbox'][0] + ann['bbox'][2] / 2) / width
    y_center = (ann['bbox'][1] + ann['bbox'][3] / 2) / height
    bbox_width = ann['bbox'][2] / width
    bbox_height = ann['bbox'][3] / height
    category_id = ann['category_id']

    filename = image['file_name']
    label_filename = filename.split('.jpg')[0]
    label_path = os.path.join(save_folder, f'{label_filename}.txt')

    with open(label_path, 'a') as f:
        keypoints = ann.get('keypoints', [])  # Assuming keypoints are available in your dataset
        if len(keypoints) == 0:
            continue  # Skip this annotation if there are no keypoints

        # Convert keypoints to normalized YOLO format
        keypoint_values = [float(val) / width if i % 3 != 2 else float(val) / height for i, val in enumerate(keypoints)]
        keypoint_string = ' '.join(map(str, keypoint_values))
        
        line = f"{category_id - 1} {x_center} {y_center} {bbox_width} {bbox_height} {keypoint_string}\n"
        f.write(line)

    # Copy the image to the destination folder
    image_source = os.path.join(source_path, image["file_name"])
    shutil.copy(image_source, destination_path)
